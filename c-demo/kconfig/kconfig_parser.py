#!/usr/bin/env python3

from dataclasses import dataclass
from typing import Dict, Optional
import os

@dataclass
class ConfigItem:
    # 配置项的数据结构，包含类型、提示信息和值
    type: str        # 配置项类型
    prompt: Optional[str]  # 配置项的提示信息
    value: bool = False    # 配置项的值，默认为False

class KconfigParser:
    def __init__(self, kconfig_path: str) -> None:
        # 初始化配置解析器，存储所有配置项
        self.config: Dict[str, ConfigItem] = {}
        self._parse(kconfig_path)
    
    def _parse(self, path: str) -> None:
        current = None
        for line in map(str.strip, open(path)):
            if not line or line.startswith('#'):
                continue
            parts = line.split()
            if parts[0] == 'config':
                current = parts[1]
            elif parts[0] == 'bool' and current:
                self.config[current] = ConfigItem('bool', line.split('"')[1] if '"' in line else None)
            elif parts[0] == 'default' and current:
                self.config[current].value = parts[1].lower() == 'y'

    def write(self, dotconfig: str) -> None:
        with open(dotconfig, 'w') as f:
            f.write("# Generated by kconfig_parser.py\n# Do not edit\n\n")
            f.writelines(f"CONFIG_{k}={'y' if v.value else 'n'}\n" for k, v in self.config.items())

if __name__ == '__main__':
    base = os.path.dirname(os.path.abspath(__file__))
    parser = KconfigParser(f"{base}/Kconfig")
    parser.write(f"{base}/.config")