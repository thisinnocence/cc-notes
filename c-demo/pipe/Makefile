# Targets
TARGETS = pipe.out

# Set the default goal
.DEFAULT_GOAL := all

# Use pkg-config to get the GLib cflags and ldflags
PKG_CFLAGS = $(shell pkg-config --cflags glib-2.0)
PKG_LDFLAGS = $(shell pkg-config --libs glib-2.0)

# Include directories
INC_DIRS = ../util /usr/include/glib-2.0
INC_CFLAGS = $(addprefix -I, $(INC_DIRS))

# -MMD generates .d files for dependency tracking, excluding system headers.
# -MP adds phony targets to prevent errors when headers are deleted.
GEN_DEP_CFLAGS = -MMD -MP

# common cflags
COMMON_CFLAGS = -Wall -Wextra -g

CFLAGS = $(INC_CFLAGS) $(GEN_DEP_CFLAGS) $(COMMON_CFLAGS) $(PKG_CFLAGS)

# link flags:
LDFLAGS = -lrt -lpthread $(PKG_LDFLAGS)

# This Makefile uses implicit rules to build .o and .d files.
# .o files are compiled from .c files using default rules with CFLAGS.
# .d files (dependency files) are auto-generated by GCC with -MMD -MP.
# -include $(DEPS) ensures the generated .d files are included during builds.
SRCS = $(wildcard *.c)
OBJS = $(SRCS:.c=.o)
DEPS = $(SRCS:.c=.d)
-include $(DEPS)

# Phony targets
.PHONY: all clean

# Default target
all: $(TARGETS)

# when Makefile change, re-compile all
$(OBJS): Makefile

# Linking
$(TARGETS): $(OBJS)
	@echo "Linking $@..."
	$(CC) $(CFLAGS) -o $@ $^ $(LDFLAGS)

clean:
	rm -f $(OBJS) $(TARGETS) $(DEPS)
